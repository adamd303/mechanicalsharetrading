<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="BenchMarkReturnNotNumeric" xml:space="preserve">
    <value>The Benchmark Return is not numeric</value>
  </data>
  <data name="DollarsPerPointLessZero" xml:space="preserve">
    <value>The Dollars/Point must be greater than zero</value>
  </data>
  <data name="DollarsPerPointNotNumeric" xml:space="preserve">
    <value>The Dollars/Point is not numeric</value>
  </data>
  <data name="EntryStopExceedHiLoLessZero" xml:space="preserve">
    <value>The Entry Stop for Exceed Hi Lo is less than zero</value>
  </data>
  <data name="EntryStopExceedHiLoNotNumeric" xml:space="preserve">
    <value>The Entry Stop for Exceed Hi Lo is not numeric</value>
  </data>
  <data name="EntryStopRetracementLessZero" xml:space="preserve">
    <value>The Entry Stop for Retracement is less than zero</value>
  </data>
  <data name="EntryStopRetracementNotNumeric" xml:space="preserve">
    <value>The Entry Stop for Retracement is not numeric</value>
  </data>
  <data name="ExitStopLessZero" xml:space="preserve">
    <value>The Exit Stop is less than zero</value>
  </data>
  <data name="ExitStopNotNumeric" xml:space="preserve">
    <value>The Exit Stop is not numeric</value>
  </data>
  <data name="InputFileMissing" xml:space="preserve">
    <value>The Input File is missing</value>
  </data>
  <data name="LongTermLessShortTerm" xml:space="preserve">
    <value>Long Term Support/Resistance Days must be greater than Short Term</value>
  </data>
  <data name="LongTermLessZero" xml:space="preserve">
    <value>Long Term support/Resistance Days must be greater than zero</value>
  </data>
  <data name="LongTermNotNumeric" xml:space="preserve">
    <value>Long Term Support/Resistance Days must be an integer</value>
  </data>
  <data name="NoBenchMarkReturnEntered" xml:space="preserve">
    <value>The Benchmark Return is missing</value>
  </data>
  <data name="NoContractsEntered" xml:space="preserve">
    <value>The No. of Contracts is missing</value>
  </data>
  <data name="NoContractsLessZero" xml:space="preserve">
    <value>The No. of Contracts must be greater than zero</value>
  </data>
  <data name="NoContractsNotNumeric" xml:space="preserve">
    <value>The No. of Contracts is not numeric</value>
  </data>
  <data name="NoDollarsPerPointEntered" xml:space="preserve">
    <value>The Dollars/Point is missing</value>
  </data>
  <data name="NoEntryStopPyramidEntered" xml:space="preserve">
    <value>No Entry Stop for Pyramid entered</value>
  </data>
  <data name="NoEntryStopRetracementEntered" xml:space="preserve">
    <value>No Entry Stop for Retracement entered</value>
  </data>
  <data name="NoExitStopEntered" xml:space="preserve">
    <value>No Exit Stop entered</value>
  </data>
  <data name="NoLongTermEntered" xml:space="preserve">
    <value>Long Term Support/Resistance Days is missing</value>
  </data>
  <data name="NoPercentRiskEntered" xml:space="preserve">
    <value>The Percent Risk is missing</value>
  </data>
  <data name="NoRetracementFractionEntered" xml:space="preserve">
    <value>The Retracement Fraction is missing</value>
  </data>
  <data name="NoShortTermEntered" xml:space="preserve">
    <value>Short Term Support/Resistance Days is missing</value>
  </data>
  <data name="NoSkidFractionEntered" xml:space="preserve">
    <value>The Skid Fraction is missing</value>
  </data>
  <data name="NoSkidPointsEntered" xml:space="preserve">
    <value>The Skid Points is missing</value>
  </data>
  <data name="NoStartingEquityEntered" xml:space="preserve">
    <value>The Starting Equity is missing</value>
  </data>
  <data name="NoTicksForEntryEntered" xml:space="preserve">
    <value>The Ticks for Entry is missing</value>
  </data>
  <data name="NoTickSizeEntered" xml:space="preserve">
    <value>The Tick Size is missing</value>
  </data>
  <data name="PercentRiskLessZero" xml:space="preserve">
    <value>The Percent Risk must be greater than zero</value>
  </data>
  <data name="PercentRiskNotNumeric" xml:space="preserve">
    <value>The Percent Risk is not numeric</value>
  </data>
  <data name="RetracementFractionLessZero" xml:space="preserve">
    <value>The Retracement Fraction is less than zero</value>
  </data>
  <data name="RetracementFractionNotNumeric" xml:space="preserve">
    <value>The Retracement Fraction is not numeric</value>
  </data>
  <data name="ShortTermLessZero" xml:space="preserve">
    <value>Short Term support/Resistance Days must be greater than zero</value>
  </data>
  <data name="ShortTermNotNumeric" xml:space="preserve">
    <value>Short Term Support/Resistance Days must be an integer</value>
  </data>
  <data name="SkidFractionLessZero" xml:space="preserve">
    <value>The Skid Fraction must be greater than zero</value>
  </data>
  <data name="SkidFractionNotNumeric" xml:space="preserve">
    <value>The Skid Fraction is not numeric</value>
  </data>
  <data name="SkidPointsLessZero" xml:space="preserve">
    <value>The Skid Points is less than zero</value>
  </data>
  <data name="SkidPointsNotNumeric" xml:space="preserve">
    <value>The Skid Points is not numeric</value>
  </data>
  <data name="StartingEquityLessZero" xml:space="preserve">
    <value>The Starting Equity must be greater than zero</value>
  </data>
  <data name="StartingEquityNotNumeric" xml:space="preserve">
    <value>The Starting Equity is not numeric</value>
  </data>
  <data name="TicksForEntryLessZero" xml:space="preserve">
    <value>The Ticks for entry is less than zero</value>
  </data>
  <data name="TicksForEntryNotNumeric" xml:space="preserve">
    <value>The Ticks for Entry is not numeric</value>
  </data>
  <data name="TickSizeLessZero" xml:space="preserve">
    <value>The Tick Size must be greater than zero</value>
  </data>
  <data name="TickSizeNotNumeric" xml:space="preserve">
    <value>The Tick Size is not numeric</value>
  </data>
</root>